//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Registrations = newRegistrationsTable("public", "registrations", "")

type registrationsTable struct {
	postgres.Table

	//Columns
	ID                 postgres.ColumnInteger
	GameID             postgres.ColumnInteger
	TeamName           postgres.ColumnString
	CaptainName        postgres.ColumnString
	Phone              postgres.ColumnString
	Telega             postgres.ColumnString
	Amount             postgres.ColumnInteger
	RegistrationNumber postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegistrationsTable struct {
	registrationsTable

	EXCLUDED registrationsTable
}

// AS creates new RegistrationsTable with assigned alias
func (a RegistrationsTable) AS(alias string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationsTable with assigned schema name
func (a RegistrationsTable) FromSchema(schemaName string) *RegistrationsTable {
	return newRegistrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationsTable with assigned table prefix
func (a RegistrationsTable) WithPrefix(prefix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationsTable with assigned table suffix
func (a RegistrationsTable) WithSuffix(suffix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationsTable(schemaName, tableName, alias string) *RegistrationsTable {
	return &RegistrationsTable{
		registrationsTable: newRegistrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRegistrationsTableImpl("", "excluded", ""),
	}
}

func newRegistrationsTableImpl(schemaName, tableName, alias string) registrationsTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		GameIDColumn             = postgres.IntegerColumn("game_id")
		TeamNameColumn           = postgres.StringColumn("team_name")
		CaptainNameColumn        = postgres.StringColumn("captain_name")
		PhoneColumn              = postgres.StringColumn("phone")
		TelegaColumn             = postgres.StringColumn("telega")
		AmountColumn             = postgres.IntegerColumn("amount")
		RegistrationNumberColumn = postgres.IntegerColumn("registration_number")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		allColumns               = postgres.ColumnList{IDColumn, GameIDColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, TelegaColumn, AmountColumn, RegistrationNumberColumn, CreatedAtColumn}
		mutableColumns           = postgres.ColumnList{GameIDColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, TelegaColumn, AmountColumn, RegistrationNumberColumn, CreatedAtColumn}
	)

	return registrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		GameID:             GameIDColumn,
		TeamName:           TeamNameColumn,
		CaptainName:        CaptainNameColumn,
		Phone:              PhoneColumn,
		Telega:             TelegaColumn,
		Amount:             AmountColumn,
		RegistrationNumber: RegistrationNumberColumn,
		CreatedAt:          CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

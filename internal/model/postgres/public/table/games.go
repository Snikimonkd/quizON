//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Games = newGamesTable("public", "games", "")

type gamesTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	Name           postgres.ColumnString
	Description    postgres.ColumnString
	Date           postgres.ColumnTimestampz
	TeamsAmount    postgres.ColumnInteger
	PricePerPerson postgres.ColumnInteger
	Location       postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	CreatedBy      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GamesTable struct {
	gamesTable

	EXCLUDED gamesTable
}

// AS creates new GamesTable with assigned alias
func (a GamesTable) AS(alias string) *GamesTable {
	return newGamesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GamesTable with assigned schema name
func (a GamesTable) FromSchema(schemaName string) *GamesTable {
	return newGamesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GamesTable with assigned table prefix
func (a GamesTable) WithPrefix(prefix string) *GamesTable {
	return newGamesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GamesTable with assigned table suffix
func (a GamesTable) WithSuffix(suffix string) *GamesTable {
	return newGamesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGamesTable(schemaName, tableName, alias string) *GamesTable {
	return &GamesTable{
		gamesTable: newGamesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newGamesTableImpl("", "excluded", ""),
	}
}

func newGamesTableImpl(schemaName, tableName, alias string) gamesTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		NameColumn           = postgres.StringColumn("name")
		DescriptionColumn    = postgres.StringColumn("description")
		DateColumn           = postgres.TimestampzColumn("date")
		TeamsAmountColumn    = postgres.IntegerColumn("teams_amount")
		PricePerPersonColumn = postgres.IntegerColumn("price_per_person")
		LocationColumn       = postgres.StringColumn("location")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		CreatedByColumn      = postgres.IntegerColumn("created_by")
		allColumns           = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, DateColumn, TeamsAmountColumn, PricePerPersonColumn, LocationColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, DescriptionColumn, DateColumn, TeamsAmountColumn, PricePerPersonColumn, LocationColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn}
	)

	return gamesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Name:           NameColumn,
		Description:    DescriptionColumn,
		Date:           DateColumn,
		TeamsAmount:    TeamsAmountColumn,
		PricePerPerson: PricePerPersonColumn,
		Location:       LocationColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		CreatedBy:      CreatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
